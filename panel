#!/usr/bin/bash
#
# dependencies: acpi
#
#trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

script_name=$(basename $0)
script_dir=$(dirname $0)

#sep=" %{Fcyan}| "
sep=" "
default="#90707070"
wm_socket="bspwm:[0-9+]-socket"
#wm_icons="\uf118"

mail () {
    glyph_mail="\u136"
}

music () {
    glyph_music="\u266B"
    music_text=${glyph_music}
    music_color="#99802020"

    ret=$(mpc current --format "[%title% ]|[%file%]" 2>/dev/null)
    test -z $ret && echo "" || echo "U%{F${music_color}}${music_text} %{F${default}}${ret}"
}

volume() {
    glyph_volume="\u00ed"
    glyph_volume_mute="\uf117"
    glyph_volume_100_80="\uf114"
    glyph_volume_80_50="\uf115"
    glyph_volume_50_0="\uf116"
    volume_color="#99804035"

    ret=$(amixer get Master | egrep -o "[0-9]+%" | head -1 | egrep -o "[0-9]*");
    if test $ret -le 100 -a $ret -gt 80; then
        volume_text="${glyph_volume_100_80}"
    elif test $ret -le 80 -a $ret -gt 50; then
        volume_text="${glyph_volume_80_50}"
    elif test $ret -le 50 -a $ret -gt 0; then
        volume_text="${glyph_volume_50_0}"
    elif test $ret -eq 0; then
        volume_text="${glyph_volume_mute}"
    fi
    echo "%{F${volume_color}}${volume_text} %{F${default}}${ret}%"
}

cpu () {
    glyph_cpu="\uf002"
    cpu_text="${glyph_cpu}"
    cpu_color="#90805050"

    # cat /proc/cpuinfo
    #
    ret=$(ps -eo pcpu |grep -vE '^\s*(0.0|%CPU)' | sed -n '1h;$!H;$g;s/\n/ +/gp' | bc)
    echo "%{F${cpu_color}}${cpu_text} %{F${default}}${ret}%%"
}

memory() {
    glyph_mem="\uf003"
    mem_text="${glyph_mem}"
    mem_color="#90509050"

    echo `grep -E 'Mem(Total|Free)' /proc/meminfo |awk '{print $2}'` | read t f
    ret=$(bc <<< "scale=2; 100 - $f / $t * 100" | cut -d. -f1)
    echo "%{F${mem_color}}${mem_text} %{F${default}}${ret}%%"
}

proc_wm_info() {
    num_mon=$2
    line=$(echo $1 | sed 's/:/ /g')

    wm_infos=""
    eval set -- "$line";
    while [ $# -gt 0 ] ; do
        item=$1
        name=${item#?}
        case $item in
            M*) [ $num_mon -gt 1 ] && wm_infos="${wm_infos}${name}" ;;  # active monitor
            m*) [ $num_mon -gt 1 ] && wm_infos="${wm_infos}${name}" ;;  # inactive monitor
            O*) wm_infos="${wm_infos} %{F${focus_workspace}}${name}" ;; # focused occupied desktop
            F*) wm_infos="${wm_infos} %{F${focus_workspace}}${name}";; # focused free desktop
            U*) wm_infos="${wm_infos}%{F${default}}${name}" ;;  # focused urgent desktop
            o*) wm_infos="${wm_infos} %{F${default}}${name}" ;; # occupied desktop
            f*) wm_infos="${wm_infos} %{F${default}}${name}";; # free desktop
            u*) wm_infos="${wm_infos}%{F${default}}${name}";; # urgent desktop
            L*) wm_infos="%{F${default}}[${name}]%{F${default}}${wm_infos}" ;; # layout
        esac
        shift
    done
}

loop () {
    #set -x
    focus_workspace="yellow"
    clock_info=""
    battery_info=""
    cpu_info=""
    mem_info=""
    network_info=""
    volume_info=""
    music_info=""
    weather_info=""

    # TODO monitors
    #num_mon=$(bspc query -M | wc -l)
    num_mon=1

    while read -r line; do
        case $line in
            T*) title_info="${line#?}" && [ ! -z ${title_info} ] && title_info=" ${title_info}" ;;
            D*) clock_info="${sep}${line#?}" ;;
            C*) cpu_info="${sep}${line#?}" ;;
            M*) mem_info="${sep}${line#?}" ;;
            B*) battery_info="${sep}${line#?}";;
            N*) network_info="${sep}${line#?}";;
            V*) volume_info="${sep}${line#?}";;
            U*) music_info="${sep}${line#?}";;
            R*) weather_info="${sep}${line#?}";;
            W*) proc_wm_info $line $num_mon ;;
        esac

        # bar
        #echo "%{l}   ${wm_icons}${title_info}%{r} $(echo "${music_info}${weather_info}${cpu_info}${mem_info}${battery_info}${network_info}${clock_info}${volume_info}   " | sed "s/^${sep}/ /")"

        # xsetroot
        echo "${music_info}${weather_info}${cpu_info}${mem_info}${battery_info}${network_info}${clock_info}${volume_info}   " | sed "s/^${sep}/ /"

        # TODO: hack for bspwm
        #[ -z $(ls /tmp | egrep "${wm_socket}") ] && kill 0
    done
}

register () {
    PANEL_FIFO=$1
    rm -rf  $PANEL_FIFO
    mkfifo $PANEL_FIFO

    # script
    #while true; do echo "C$(cpu)"; sleep 1; done > $PANEL_FIFO &
    #while true; do echo "M$(memory)"; sleep 1; done > $PANEL_FIFO &
    #true; do echo "N$(snetwork)"; sleep 5; done > $PANEL_FIFO &
    #while true; do echo "V$(volume)"; sleep 1; done > $PANEL_FIFO &
    #while true; do echo "$(music)"; sleep 1; done > $PANEL_FIFO &

    #ssnoop -c sweather -sf 'R%s' -i 5 > $PANEL_FIFO &
    ssnoop -c sclock -sf 'D%s' -i 1 > $PANEL_FIFO &
    ssnoop -c sbattery -sf 'B%s' -i 1 > $PANEL_FIFO &
    #ssnoop -c snetwork -sf 'N%s' -i 3 > $PANEL_FIFO &
}

register_bspwm () {
    # wm info, check if bspwm has launched, before subc
    while [ ! -e /tmp/bspwm*socket ]; do sleep 1; done
    pkill -x bspc; bspc control --subscribe > "$PANEL_FIFO" &
    # wm title
    xtitle -sf 'T%s' > "$PANEL_FIFO" &
}

check() {
    if [ $(pgrep -cx ${script_name}) -gt 1 ] ; then
        printf "%s\n" "The ${script_name} is already running." >&2
        exit 1
    fi
}

main () {
    check
    register "/tmp/panel-fifo"

    #cat "/tmp/panel-fifo" | loop | bar -f "-xos4-Terminus-Medium-R-Normal--14-140-72-72-C-80-ISO10646-1" -B "#99050505" | while read action; do
        #echo $action
            #case $action in
                #ayforecast) sweather -a;;
                #asclock) sclock -a ;;
            #esac
        #done &
    cat "/tmp/panel-fifo" | loop
    wait
}


main $@
